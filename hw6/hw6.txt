1.
    (a) {x|A, y|B, z|B}
    (b) Does not exist
    (c) {x|B, y|A}
    (d) {x|John, y|John}
    (e) Does not exist
2.
    (a) 1.      (A x) (food(x)) => likes(John, x)
        2.      food(apple)
        3.      food(chicken)
        4.      (A x) (A y) (eats(x, y) & ~killed-by(x, y)) => food(y)
        5.      (A x) (A y) (killed-by(x, y)) => ~alive(x)
        6.      eats(Bill, peanuts) & alive(Bill)
        7.      (A x) (eats(Bill, x)) => eats(Sue, x)
    (b) 1.      ~food(x) | likes(John, x)
        2.      food(apple)
        3.      food(chicken)
        4.      ~eats(x, y) | killed-by(x, y) | food(y)
        5.      ~killed-by(x, y) | ~alive(x)
        6.      eats(Bill, peanuts) & alive(Bill)
        7.      ~eats(Bill, x) | eats(Sue, x)
    (c) 8.      ~likes(John, peanuts)
        9.      ~food(peanuts) (8, 1)
        10.     ~eats(x, peanuts) | killed-by(x, peanuts) (9, 4)
        11.     alive(Bill) (6)
        12.     killed-by(Bill, peanuts) (10)
        13.     ~alive(Bill) (12, 5)
        14.     (11, 13)
        We've reached the empty clause, proving that likes(John, peanuts) is true.
    (d) 8a.     ~((E x) (food(x) & eats(Sue, x)))
        8b.     ~food(x) | ~eats(Sue, x) (8a)
        9.      ~food(x) | ~eats(Bill, x) (8b, 7)
        10.     ~food(peanuts) (9)
        11.     alive(Bill) (6)
        12.     killed-by(Bill, peanuts) (10)
        13.     ~alive(Bill) (12, 5)
        14.     (11, 13)
        We've reached the empty clause, proving that (E x) (food(x) & eats(Sue, x)) is true, so Sue eats all food.
    (e) 6.      (A x) (~(E y) eats(x, y)) => dead(x)
        8.      (A x) (dead(x)) => ~alive(x)
        9.      alive(Bill)
        To convert to CNF:
        6a.     (A x) ~(~(E y) eats(x, y)) | dead(x)
        6b.     (A x) ((E y) (eats(x, y))) | dead(x)
        6c.     (A x) (eats(x, t)) | dead(x)
        6d.     eats(x, t) | dead(x)
        8a.     ~dead(x) | ~alive(x)

        6d, 8a, and 9 are the new entries in the knowledge base, replacing the original 6.

        10a.    ~((E h) (food(h) & eats(Sue, h)))
        10b.    ~food(h) | ~eats(Sue, h) (10a)
        11.     ~food(h) | ~eats(Bill, h) (10b, 7)
        12.     ~food(t) | dead(Bill) (11, 6d)
        13.     ~food(t) | ~alive(Bill) (12, 8a)
        14.     ~food(t) (13, 9)
        15.     ~eats(x, t) | killed-by(x, t) (14, 4)
        16.     ~eats(x, t) | ~alive(x) (15, 5)
        17.     ~eats(Bill, t)  (16, 9)
        18.     dead(Bill) (17, 6d)
        19.     ~alive(Bill) (18, 8a)
        20.     (9, 19)
        We've reached the empty clause, proving that (E x) (food(x) & eats(Sue, x)) is true, so Sue eats all food.
        
3.
    Is the 3-color SAT instance satisfiable?
    Is the 4-color SAT instance satisfiable?
    What do the answers of these two SAT instances tell you about the graph coloring problem of the above graph? Can you give a solution (a coloring) to the graph coloring problem of the above graph based on the results of RSat?
    What is the minimum number of colors required to properly color this graph?
